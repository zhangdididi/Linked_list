 //哈希表法
 public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        Set<ListNode> set = new HashSet<>();
        for (ListNode cur1 = headA; cur1 != null; cur1 = cur1.next) {
            set.add(cur1);
        }
        for (ListNode cur2 = headB; cur2 != null; cur2 = cur2.next) {
            if (set.contains(cur2)) {
                return cur2;
            }
        }
        return null;
    }
}
 
 //计数法
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        //先求出两个单链表的长度
        int lenA = size(headA);
        int lenB = size(headB);
        //较长的链表先走差值步
        if (lenA - lenB > 0) {
            for (int i = 0; i < lenA - lenB; i++) {
                headA = headA.next;
            }
        } else {
            for (int i = 0; i < lenB - lenA; i++) {
                headB = headB.next;
            }
        }
        //此时headA 和 headB的长度已经相等了
        while (headA != null) {
            if (headA != headB) {
                headA = headA.next;
                headB = headB.next;
            } else {
                return headA;
            }
        }
        return null;
    }

    public static int size(ListNode head) {
        int count = 0;
        for (ListNode cur = head; cur != null; cur = cur.next) {
            count++;
        }
        return count;
    }
}


/*
public class ListNode {
    int val;
    ListNode next = null;

    ListNode(int val) {
        this.val = val;
    }
}*/
public class Solution {
    public ListNode FindFirstCommonNode(ListNode pHead1, ListNode pHead2) {
        int len1 = size(pHead1);
        int len2 = size(pHead2);
        ListNode curr1 = pHead1;
        ListNode curr2 = pHead2;
        if (len1 > len2) {
            for (int i = 0; i < len1 - len2; i++) {
                curr1 = curr1.next;
            }
        } else {
            for (int i = 0; i < len2 - len1; i++) {
                curr2 = curr2.next;
            }
        }
        //让两个链表的剩余节点相同
        while (curr1 != null && curr2 != null) {
            if (curr1 != curr2) {
                curr1 = curr1.next;
                curr2 = curr2.next;
            } else {
                return curr1;
            }
        }
        return null;
    }
    
    public int size(ListNode head) {
        int size = 0;
        for (ListNode curr = head; curr != null; curr = curr.next) {
            size++;
        }
        return size;
    }
}
